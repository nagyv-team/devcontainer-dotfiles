#!/bin/bash
set -euo pipefail

# Validate arguments
if [ $# -ne 2 ]; then
    echo "Work on a task in a separate git worktree with Claude Code"
    echo "Usage: $0 <issue_id> <task_number>"
    exit 1
fi

ISSUE_ID="$1"
TASK="$2"

# Validate inputs are numbers
if ! [[ "$ISSUE_ID" =~ ^[0-9]+$ ]] || ! [[ "$TASK" =~ ^[0-9]+$ ]]; then
    echo "Error: Both extracted arguments must be positive integers"
    echo "  ISSUE_ID: $ISSUE_ID"
    echo "  TASK: $TASK"
    exit 1
fi

if [ "$TASK" -lt 1 ]; then
    echo "Error: TASK must be at least 1"
    exit 1
fi

# Function to process a single task
process_task() {
    local task_number=$1
    local issue_id=$2
    local worktree_path="../issue-${issue_id}-task-${task_number}"
    
    echo "Task $task_number: Creating worktree $worktree_path"
    
    # Create git worktree
    git worktree add -b tasks/issue-$issue_id-task-$task_number "$worktree_path" 2>/dev/null || {
        echo "Task $task_number: Failed to create worktree $worktree_path"
        return 1
    }
    
    # Change to the worktree directory
    cd "$worktree_path" || {
        echo "Task $task_number: Failed to change directory to $worktree_path"
        return 1
    }
    
    echo "Task $task_number: Running claude-session in $worktree_path"
    
    # Run claude-session with the specified prompt
    export CLAUDE_SESSION_ID=$(uuidgen) && claude --session-id $CLAUDE_SESSION_ID --dangerously-skip-permissions -p "/implement-task-with-minimal-context task $task_number of issue $issue_id" || {
        echo "Task $task_number: claude-session failed"
        return 1
    }
    
    echo "Task $task_number: spawned successfully"
}

process_task "$TASK" "$ISSUE_ID" &

# Exit immediately - background processes continue
exit 0
