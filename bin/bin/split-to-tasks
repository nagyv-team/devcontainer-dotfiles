#!/usr/bin/env python3
"""
Markdown Task Splitter

This script breaks up a markdown file into smaller files based on task headers.
It looks for headers with the pattern "### Task i: <title>" and extracts the content
of each task section into separate files named "task-i.md".
"""

import re
import os
import argparse
from pathlib import Path


def extract_tasks(markdown_content):
    """
    Extract task sections from markdown content.
    
    Args:
        markdown_content (str): The full markdown file content
        
    Returns:
        dict: Dictionary mapping task numbers to their content
    """
    tasks = {}
    
    # Split content into lines for easier processing
    lines = markdown_content.split('\n')
    
    current_task = None
    current_content = []
    
    for line in lines:
        # Check if this line is a task header
        task_match = re.match(r'^### Task (\d+):', line)
        
        if task_match:
            # Save previous task if it exists
            if current_task is not None:
                tasks[current_task] = '\n'.join(current_content).strip()
            
            # Start new task
            current_task = int(task_match.group(1))
            current_content = []
        
        elif current_task is not None:
            # Check if we've hit another header of the same level or higher
            if line.startswith('## ') or line.startswith('# '):
                # End current task
                tasks[current_task] = '\n'.join(current_content).strip()
                current_task = None
                current_content = []
            else:
                # Add line to current task content
                current_content.append(line)
    
    # Don't forget the last task
    if current_task is not None:
        tasks[current_task] = '\n'.join(current_content).strip()
    
    return tasks


def write_task_files(tasks, output_dir='.'):
    """
    Write task content to individual files.
    
    Args:
        tasks (dict): Dictionary mapping task numbers to their content
        output_dir (str): Directory to write the task files to
    """
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    for task_num, content in tasks.items():
        filename = f"task-{task_num}.md"
        filepath = output_path / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"Created: {filepath}")


def main():
    parser = argparse.ArgumentParser(
        description="Split a markdown file into task-specific files"
    )
    parser.add_argument(
        'input_file',
        help="Path to the input markdown file"
    )
    parser.add_argument(
        '-o', '--output-dir',
        default='.',
        help="Output directory for task files (default: current directory)"
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help="Show what would be created without actually writing files"
    )
    
    args = parser.parse_args()
    
    # Check if input file exists
    if not os.path.exists(args.input_file):
        print(f"Error: Input file '{args.input_file}' not found.")
        return 1
    
    # Read the markdown file
    try:
        with open(args.input_file, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"Error reading file: {e}")
        return 1
    
    # Extract tasks
    tasks = extract_tasks(content)
    
    if not tasks:
        print("No tasks found in the markdown file.")
        print("Looking for headers matching pattern: ### Task N: <title>")
        return 1
    
    print(f"Found {len(tasks)} task(s): {list(tasks.keys())}")
    
    if args.dry_run:
        print("\n--- DRY RUN ---")
        for task_num, content in tasks.items():
            print(f"\nTask {task_num} (would be saved to task-{task_num}.md):")
            print("-" * 50)
            # Show first few lines of content
            preview_lines = content.split('\n')[:5]
            for line in preview_lines:
                print(line)
            if len(content.split('\n')) > 5:
                print("...")
    else:
        # Write task files
        try:
            write_task_files(tasks, args.output_dir)
            print(f"\nSuccessfully created {len(tasks)} task files in '{args.output_dir}'")
        except Exception as e:
            print(f"Error writing files: {e}")
            return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
